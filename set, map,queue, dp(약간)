c++
<SET 활용하기>
auto it = s.find(x);
if(it == s.end()){ //x가 s에 존재하지 않는다 }

SET vs unordered_set

cout << *s.lower_bound(x) << endl;
cout << *s.upper_bound(x) << endl;
찾지 못하면 end() 반환
//vector로 코딩할 경우 auto lower = lower_bound(v.begin(), v.end(), value) 형태임

multiset, unordered_multiset
multiset<int> s;
s.insert(5);
s.insert(5);
s.insert(5);
cout << s.count(5) << endl; // 3


s.erase(s.find(5)); // 특정값을 "모두" 삭제
s.count(5) << endl;  // 0
멀티셋에서 count함수를 이용하여 개수를 구하는 것은 효율성이 떨어짐 (추가의 O(k) 필요)

Map :  {KEY : VALUE} 
map, unordered_map ( O(log n), O(1))

특정 키의 값을 요청했을 때 그 키가 없는 경우 키가 자동생성 되고 기본값 0 으로 설정 됨.

if(m.count("abc")){ // key exists } //키의 존재 여부 확인

Priority_queue : 추가/탐색/삭제/연산이 가능한 multiset (heap 기반)
priority_queue<int, vector<int>, greater<int>> q; // 우선순위 큐 올림차순

<Dynamic Programming : 동적 계획법>
들어가기 앞서
1. 탐욕 알고리즘 ( 항상 최적해를 보장하지는 않는다) 
coins [1,2,5], n = 12 -> [5,5,2] Greedy OK 
coins [1,3,4], n = 6 -> [4,1,1] Greedy X ([3,3] OK)

동적 계획법을 사용하기 위해서는 문제의 재귀적인 구조를 찾아야 한다.
그렇기 위해서는 작은 문제의 답을 이용하여 원래의 답을 계산할 수 있기 때문!
동전 문제를 자연스럽게 재귀 문제로 바꿀 수 있다. 
합 X를 만들기 위한 동전의 최소 개수를 의미하는 함수 Solve(x)의 값을 구하는 것.

예를 들어 coins = {1,3,4} 일 경우
solve(0) = 0, solve(1) = 1, solve(2) = 2, solve(3) =1, solve(4) = 1, solve(5) = 2, solve(6) = 2, solve(7) = 2, solve(8) = 2, solve(9) = 3, solve(10) = 3
합 10을 만들기 위해서는 최소 3개의 동전이 필요하므로 solve(10) = 3이고 이때 최적해는 3+3+4=10 이다

solve 함수의 중요한 성질 중 하나는 작은 함수값을 이용하여 큰 함수값을 재귀적으로 구할 수 있다.
"핵심은 첫 번째로 어떤 동전을 선택하는지에 초점을 맞추는 것"
(10기준) 만약 1을 선택했을 경우 최소한의 동전으로 9를 만들어야 함. -> 원래 문제의 부분문제가 된다.
첫 동전을 3, 4를 선택해도 동일.

점화식으로 접근하게 된다면
solve(x) = min(solve(x-1) +1, solve(x-3)+1, solve(x-4)+1)
이 함수의 기저는 solve(0) = 0 이다.
if solve(10) = solve(7)+1 = solve(4)+2 = solve(0)+3 = 3

         inf               when x<0
solve(x) 0                 when x = 0
         min(solve(x-c)+1) when x >0 (c는 동전 변수)



int solve(int x){
if(x<0) return INF;
if(x==0) return 0;
int best = INF;
for(auto c : coins) best = min(best, solve(x-c))+1;
return best;
}
이 코드는 비효율적 왜? 모든 값에 대해서 참조하기 때문에 -> 메모이제이션(memoization)을 통해 시간복잡도를 줄이자!
bool ready[N];
int value[N];

int solve(int x){
if(x<0) return INF;
if(x==0) return 0;
//if(ready[x]) return value[x]; 이전에 찾은 값이라면 함수를 돌지 않고 return 하기.
int best = INF;
for(auto c : coins) best = min(best, solve(x-c))+1;
//ready[x] = true; 해당하는 변수의 값을 구했으므로 true로 표시
//value[x] = best; (best로 저장하는 것 중요!)
return best;
}
이 경우의 시간복잡도 : O(nk) n : 동전의 합, k 동전 종류의 개수

//반복문으로 작성시
value[0] = 0;
for(int x=1;x<=n;x++){
  for(auto c : coins){
    if((x-c)>=0) value[x] = min(value[x], value[x-c]+1);
  }
}

동전의 개수 세기
count[0] = 1;
for(int x=1;x<=n;x++){
  for(auto c :coins){
    if(x-c >=0) count[x] += count[x-c];
  }
}
if count > INT_INF 
count[x] %= m; (m = 10^9 +7)
count[x] += count[x-c];



